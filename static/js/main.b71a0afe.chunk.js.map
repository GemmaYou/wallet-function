{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["web3Modal","USDT","VOC","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","chainId","infuraId","qrcodeModalOptions","mobileLinks","torus","Torus","networkParams","host","initWeb3Modal","Web3Modal","cacheProvider","App","useState","provider","setProvider","signer","setSigner","address","setAddress","setChainId","balance","setBalance","usdtTo","setUsdtTo","vocTo","setVocTo","useEffect","isEmpty","getBalanceUSDT","getBalanceVOC","login","connect","isMetaMask","wc","peerMeta","name","request","method","params","ethers","utils","hexValue","networkName","blockExplorer","web3Provider","providers","Web3Provider","getSigner","getAddress","getNetwork","network","console","log","test","contract","Contract","VegasONE","decimals","balanceOf","res","formatUnits","setTimeout","changeToTestnet","newSigner","transferUSDT","transfer","parseUnits","tx","wait","changeToGoerli","transferVOC","logout","killSession","disconnect","className","onClick","undefined","type","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qgBAqDIA,E,gJAnCEC,EAAO,6CACPC,EAAM,6CAINC,EAAkB,CACtBC,cAAe,CACbC,QAASC,IACTC,QAAS,CACPC,IAAK,CAAE,KAAM,iCACbC,QAAS,CAAC,MACVC,SAAU,oCAEZC,mBAAoB,CAClBC,YAAa,CAAC,cAGlBC,MAAO,CACLR,QAASS,IACTP,QAAS,CACPQ,cAAe,CACbC,KAAM,gCACNP,QAAS,KAETC,SAAU,uCAMdO,EAAgB,IAAIC,IAAU,CAChCC,eAAe,EACfhB,oBAkcaiB,MAxaf,WAEE,MAAgCC,qBAAU,mBAAnCC,EAAQ,KAAEC,EAAW,KAC5B,EAA4BF,qBAAU,mBAA/BG,EAAM,KAAEC,EAAS,KACxB,EAA8BJ,mBAAS,IAAG,mBAAnCK,EAAO,KAAEC,EAAU,KAC1B,EAA8BN,qBAAU,mBAAjCZ,EAAO,KAAEmB,EAAU,KAC1B,EAA8BP,qBAAU,mBAAjCQ,EAAO,KAAEC,EAAU,KAC1B,EAA4BT,mBAAS,IAAG,mBAAjCU,EAAM,KAAEC,EAAS,KACxB,EAA0BX,mBAAS,IAAG,mBAA/BY,EAAK,KAAEC,EAAQ,KAEtBC,qBAAU,WACHC,kBAAQZ,KACC,OAAZf,GAAoB4B,IACR,IAAZ5B,GAAiB6B,IAErB,GAAG,CAACd,IA4EJ,IAAMe,EAAK,iDAAG,6HA2BQtB,EAAcuB,UAAU,KAAD,EAAhC,GAEiB,QAF1BxC,EAAS,QAEKS,QAAgB,sBAE1BT,EAAUyC,YACe,qBAAjBzC,EAAU0C,IACe,aAA/B1C,EAAU0C,GAAGC,SAASC,MAAoB,gCAEtC5C,EAAU6C,QAAQ,CACtBC,OAAQ,6BACRC,OAAQ,CAAC,CAAEtC,QAASuC,IAAOC,MAAMC,SAAS,UACzC,KAAD,MAIAlD,EAAUa,MAAM,CAAD,iCACXb,EAAUa,MAAMU,YAAY,CAIhCP,KAAM,gCACNP,QAAS,KACT0C,YAAa,UACbC,cAAe,wCACd,KAAD,GAqEiC,OADjCC,EAAe,IAAIL,IAAOM,UAAUC,aAAavD,EAAW,OAC5DwB,EAAS6B,EAAaG,YAAY,EAAD,QACjBhC,EAAOiC,aAAa,KAAD,GAA5B,OAAP/B,EAAO,iBACS2B,EAAaK,aAAa,KAAD,GAAzCC,EAAO,OAGbhC,EAAWD,GACXE,EAAW+B,EAAQlD,SAEnBc,EAAY8B,GACZ5B,EAAUD,GAAQ,kDAElBoC,QAAQC,IAAI,YAAY,EAAD,IAAK,0DAE/B,kBArIU,mCAuILxB,EAAc,iDAAG,8FACX,OAAJyB,EAAI,iDAAG,kGACwD,OAA7DC,EAAW,IAAIf,IAAOgB,SAAS/D,EAAMgE,EAAc,IAAGzC,GAAQ,EAAD,OAC5CuC,EAASG,WAAW,KAAD,EAChB,OADpBA,EAAQ,YACIH,EAAQ,SAAiBvC,EAAOiC,aAAY,yCAAnCU,UAAS,wBAA9BC,EAAG,OACTR,QAAQC,IAAIO,GACZtC,EAAWkB,IAAOC,MAAMoB,YAAYD,EAAKF,IAAW,4CACrD,kBANS,qDAQFJ,IAAO,KAAD,kDAEZF,QAAQC,IAAI,EAAD,IACXS,WAAWR,EAAM,KAAM,yDAE1B,kBAdmB,mCAgBdxB,EAAa,iDAAG,8FACV,OAAJwB,EAAI,iDAAG,kGACuD,OAA5DC,EAAW,IAAIf,IAAOgB,SAAS9D,EAAK+D,EAAc,IAAGzC,GAAQ,EAAD,OAC3CuC,EAASG,WAAW,KAAD,EAChB,OADpBA,EAAQ,YACIH,EAAQ,SAAiBvC,EAAOiC,aAAY,yCAAnCU,UAAS,wBAA9BC,EAAG,OACTR,QAAQC,IAAIO,GACZtC,EAAWkB,IAAOC,MAAMoB,YAAYD,EAAKF,IAAW,4CACrD,kBANS,qDAQFJ,IAAO,KAAD,kDAEZF,QAAQC,IAAI,EAAD,IACXS,WAAWR,EAAM,KAAM,yDAE1B,kBAdkB,mCAgBbS,EAAe,iDAAG,iGACI,OAAtBvE,EAAUS,QAAgB,qBAE1BT,EAAUyC,YACe,qBAAjBzC,EAAU0C,IACe,aAA/B1C,EAAU0C,GAAGC,SAASC,MAAoB,gCAEtC5C,EAAU6C,QAAQ,CACtBC,OAAQ,6BACRC,OAAQ,CAAC,CAAEtC,QAASuC,IAAOC,MAAMC,SAAS,UACzC,KAAD,MAIAlD,EAAUa,MAAM,CAAD,+BACXb,EAAUa,MAAMU,YAAY,CAChCP,KAAM,gCACNP,QAAS,KACT0C,YAAa,UACbC,cAAe,wCACd,KAAD,EAIAU,EAAI,iDAAG,kGAE+B,OADpCT,EAAe,IAAIL,IAAOM,UAAUC,aAAavD,EAAW,OAC5DwE,EAAYnB,EAAaG,YAAY,EAAD,OACpBH,EAAaK,aAAa,KAAD,EAAzCC,EAAO,OACb/B,EAAW+B,EAAQlD,SACnBc,EAAY8B,GACZ5B,EAAU+C,GAAW,2CACtB,kBAPS,mCASVF,WAAWR,EAAM,KAAM,2CACxB,kBAlCoB,mCAoCfW,EAAY,iDAAG,qGACdnD,EAAS,CAAD,eACiC,OAA5CsC,QAAQC,IAAI,gCAAgC,0BAIqB,OAA7DE,EAAW,IAAIf,IAAOgB,SAAS/D,EAAMgE,EAAc,IAAGzC,GAAQ,EAAD,OAC5CuC,EAASG,WAAW,KAAD,EAA5B,OAARA,EAAQ,gBAECH,EAASW,SACtB3C,EACAiB,IAAOC,MAAM0B,WAAW,IAAKT,IAC7B,KAAD,EAHK,OAAFU,EAAE,iBAIAA,EAAGC,OAAO,KAAD,GACfxC,IAAiB,4CAClB,kBAfiB,mCAiBZyC,EAAc,iDAAG,iGACK,IAAtB9E,EAAUS,QAAa,qBAEvBT,EAAUyC,YACe,qBAAjBzC,EAAU0C,IACe,aAA/B1C,EAAU0C,GAAGC,SAASC,MAAoB,gCAEtC5C,EAAU6C,QAAQ,CACtBC,OAAQ,6BACRC,OAAQ,CAAC,CAAEtC,QAASuC,IAAOC,MAAMC,SAAS,OACzC,KAAD,MAIAlD,EAAUa,MAAM,CAAD,+BACXb,EAAUa,MAAMU,YAAY,CAChCP,KAAM,SACNP,QAAS,IACT0C,YAAa,WACZ,KAAD,EAIAW,EAAI,iDAAG,kGAE+B,OADpCT,EAAe,IAAIL,IAAOM,UAAUC,aAAavD,EAAW,OAC5DwE,EAAYnB,EAAaG,YAAY,EAAD,OACpBH,EAAaK,aAAa,KAAD,EAAzCC,EAAO,OACb/B,EAAW+B,EAAQlD,SACnBc,EAAY8B,GACZ5B,EAAU+C,GAAW,2CACtB,kBAPS,mCASVF,WAAWR,EAAM,KAAM,2CACxB,kBAjCmB,mCAmCdiB,EAAW,iDAAG,qGACbzD,EAAS,CAAD,eACiC,OAA5CsC,QAAQC,IAAI,gCAAgC,0BAIoB,OAA5DE,EAAW,IAAIf,IAAOgB,SAAS9D,EAAK+D,EAAc,IAAGzC,GAAQ,EAAD,OAC3CuC,EAASG,WAAW,KAAD,EAA5B,OAARA,EAAQ,gBAECH,EAASW,SACtBzC,EACAe,IAAOC,MAAM0B,WAAW,IAAKT,IAC7B,KAAD,EAHK,OAAFU,EAAE,iBAIAA,EAAGC,OAAO,KAAD,GACfvC,IAAgB,4CACjB,kBAfgB,mCAiBX0C,EAAM,iDAAG,2FACR1D,EAAS,CAAD,oDACTtB,EAAU0C,GAAG,CAAD,eACd1C,EAAU0C,GAAGuC,cAAc,2BAClBjF,EAAUa,MAAM,CAAD,gCAClBb,EAAUa,MAAMmE,SAAS,KAAD,8BACrB1D,EAAS4D,WAAW,CAAD,iCACtB5D,EAAS4D,aAAa,KAAD,GAG7B3D,EAAY,MACZE,EAAU,MACVE,EAAW,IACXC,IACAE,IACA8B,QAAQC,IACN,qEACA,4CACH,kBAlBW,mCAoBZ,OACE,sBAAKsB,UAAU,MAAK,UACjB/C,kBAAQZ,IAAW,wBAAQ4D,QAAS7C,EAAM,oBACzCH,kBAAQZ,IAAW,wBAAQ4D,QAASJ,EAAO,oBAC7C,0CAAatD,KACb,0CAAajB,KACb,0CAAaoB,KACb,sBAAKsD,UAAU,WAAU,UACvB,sBAAKA,UAAU,cAAa,UAC1B,kFACA,yCAAYlF,UACCoF,IAAZ5E,EAAwB,KAAmB,OAAZA,EAC9B,wBAAQ2E,QAASb,EAAgB,6BAC/B,KACJ,sBAAKY,UAAU,cAAa,UAC1B,6CACA,uBAAOG,KAAK,OAAOC,SAAU,SAACC,GAAC,OAAKxD,EAAUwD,EAAEC,OAAOC,MAAM,UAGjE,wBAAQN,QAASX,EAAa,yBAEhC,sBAAKU,UAAU,WAAU,UACvB,sBAAKA,UAAU,cAAa,UAC1B,gFACA,wCAAWjF,UACEmF,IAAZ5E,EAAwB,KAAmB,IAAZA,EAC9B,wBAAQ2E,QAASN,EAAe,4BAC9B,KAEJ,sBAAKK,UAAU,cAAa,UAC1B,6CACA,uBAAOG,KAAK,OAAOC,SAAU,SAACC,GAAC,OAAKtD,EAASsD,EAAEC,OAAOC,MAAM,UAGhE,wBAAQN,QAASL,EAAY,yBAE/B,0CAGN,ECteeY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAM,EAANA,OAAQC,EAAO,EAAPA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,EACV,GAEJ,ECHAQ,IAASC,OACP,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,MAENC,SAASC,eAAe,SAM1Bb,G","file":"static/js/main.b71a0afe.chunk.js","sourcesContent":["import Torus from \"@toruslabs/torus-embed\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport VegasONE from \"./abi/VegasONE.json\";\nimport { isEmpty } from \"lodash\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3Modal from \"web3modal\";\n// import Web3 from \"web3\";\n// import {\n//   BasePostMessageStream,\n//   JRPCRequest,\n//   ObjectMultiplex,\n//   setupMultiplex,\n//   Substream,\n// } from \"@toruslabs/openlogin-jrpc\";\n// import { setAPIKey } from \"@toruslabs/http-helpers\";\n\nconst USDT = \"0xd691aCE60338a304cb0e5e7F82d77e81f02A248f\";\nconst VOC = \"0x00b8a4698970ad1d724360804E2864785A4BB1A5\";\n// const myAddr = \"0x99e54058245b08bd7b40481F971F0EaC255ffDf7\";\nconst INFURA_PROJECT_ID = \"1505b863360c4bfa846e6e9a170aa9fe\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider, // required\n    options: {\n      rpc: { 1172: \"https://testnet-rpc.vegas.one\" }, // required\n      chainId: [1172],\n      infuraId: \"1505b863360c4bfa846e6e9a170aa9fe\",\n    },\n    qrcodeModalOptions: {\n      mobileLinks: [\"metamask\"],\n    },\n  },\n  torus: {\n    package: Torus,\n    options: {\n      networkParams: {\n        host: \"https://testnet-rpc.vegas.one\",\n        chainId: 1172,\n        // networkName: \"VegasOneChain testnet\",\n        infuraId: \"1505b863360c4bfa846e6e9a170aa9fe\",\n      },\n    },\n  },\n};\n\nlet initWeb3Modal = new Web3Modal({\n  cacheProvider: false,\n  providerOptions, // required\n});\n\nlet web3Modal;\n\n// const addNetwork = async (params) => {\n//   try {\n//     await window.ethereum.request({\n//       method: \"wallet_addEthereumChain\",\n//       params,\n//     });\n//   } catch (e) {\n//     console.log(\"addNetwork err\", e);\n//   }\n// };\n\n// test torus pkg initStream\n/*\nconst htmlToElement = (html) => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n*/\n\nfunction App() {\n  // const [web3Modal, setWeb3Modal] = useState();\n  const [provider, setProvider] = useState();\n  const [signer, setSigner] = useState();\n  const [address, setAddress] = useState(\"\");\n  const [chainId, setChainId] = useState();\n  const [balance, setBalance] = useState();\n  const [usdtTo, setUsdtTo] = useState(\"\");\n  const [vocTo, setVocTo] = useState(\"\");\n\n  useEffect(() => {\n    if (!isEmpty(signer)) {\n      chainId === 1172 && getBalanceUSDT();\n      chainId === 5 && getBalanceVOC();\n    }\n  }, [signer]);\n\n  // test torus pkg initStream\n  /*\n  const t = () => {\n    console.log(\"0\");\n    const torusUrl = `https://app.tor.us/v1.37.1`;\n    const logLevel = \"error\";\n    const torusIframeUrl = new URL(torusUrl);\n\n    // const torus = new Torus();\n    const torusIframe = htmlToElement(\n      `<iframe\n        id=\"torusIframe\"\n        allow=${false ? \"camera\" : \"\"}\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%; color-scheme: none;\n        height: 100%; border: none; border-radius: 0; z-index: 99999\"\n      ></iframe>`\n    );\n\n    console.log(\"1\");\n    torusIframe.onload = async () => {\n      const communicationStream = new BasePostMessageStream({\n        name: \"embed_comm\",\n        target: \"iframe_comm\",\n        targetWindow: torusIframe.contentWindow,\n        targetOrigin: new URL(torusUrl).origin,\n      });\n      const communicationMux = setupMultiplex(communicationStream);\n      const initStream = communicationMux.getStream(\"init_stream\");\n      let apikey = \"torus-default\";\n      setAPIKey(apikey);\n\n      const LOGIN_PROVIDER = {\n        GOOGLE: \"google\",\n        FACEBOOK: \"facebook\",\n        TWITCH: \"twitch\",\n        REDDIT: \"reddit\",\n        DISCORD: \"discord\",\n      };\n\n      const defaultVerifiers = {\n        [LOGIN_PROVIDER.GOOGLE]: true,\n        [LOGIN_PROVIDER.FACEBOOK]: true,\n        [LOGIN_PROVIDER.REDDIT]: true,\n        [LOGIN_PROVIDER.TWITCH]: true,\n        [LOGIN_PROVIDER.DISCORD]: true,\n      };\n      console.log(\"2\");\n\n      initStream.write({\n        name: \"init_stream\",\n        data: {\n          enabledVerifiers: defaultVerifiers,\n          loginConfig: {},\n          whiteLabel: {},\n          buttonPosition: \"bottom-left\",\n          buttonSize: 56,\n          torusWidgetVisibility: true,\n          apiKey: apikey,\n          skipTKey: false,\n          network: {\n            host: \"https://testnet-rpc.vegas.one\",\n            chainId: 1172,\n          },\n          mfaLevel: \"default\",\n        },\n      });\n      console.log(initStream);\n    };\n    window.document.body.appendChild(torusIframe);\n  };\n  */\n\n  const login = async () => {\n    // const providerOptions = {\n    //   walletconnect: {\n    //     package: WalletConnectProvider, // required\n    //     options: {\n    //       rpc: { 1172: \"https://testnet-rpc.vegas.one\" }, // required\n    //       chainId: [1172],\n    //       // infuraId: \"1505b863360c4bfa846e6e9a170aa9fe\",\n    //     },\n    //     qrcodeModalOptions: {\n    //       mobileLinks: [\"metamask\"],\n    //     },\n    //   },\n    //   torus: {\n    //     package: Torus,\n    //     options: {\n    //       networkParams: {\n    //         host: \"https://testnet-rpc.vegas.one\",\n    //         chainId: 1172,\n    //         // networkName: \"VegasOneChain testnet\",\n    //         // infuraId: \"1505b863360c4bfa846e6e9a170aa9fe\",\n    //       },\n    //     },\n    //   },\n    // };\n\n    try {\n      web3Modal = await initWeb3Modal.connect();\n      // only test wc with metamask or metamask extension\n      if (web3Modal.chainId !== 1172) {\n        if (\n          web3Modal.isMetaMask ||\n          (typeof web3Modal.wc !== \"undefined\" &&\n            web3Modal.wc.peerMeta.name === \"MetaMask\")\n        ) {\n          await web3Modal.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: ethers.utils.hexValue(1172) }],\n          });\n        }\n\n        // change chain when Torus wallet is not on 1172\n        if (web3Modal.torus) {\n          await web3Modal.torus.setProvider({\n            // host: \"goerli\",\n            // chainId: \"5\",\n            // networkName: \"goerli\",\n            host: \"https://testnet-rpc.vegas.one\",\n            chainId: 1172,\n            networkName: \"testnet\",\n            blockExplorer: \"https://testnet-explorer.vegas.one/\",\n          });\n        }\n      }\n\n      /*\n      let initWeb3Modal = new Web3Modal({\n        cacheProvider: false,\n        providerOptions, // required\n      });\n\n      const provider = await initWeb3Modal.connect();\n      // console.log(provider);\n\n      // console.log(provider.chainId);\n      // only test wc with metamask or metamask extension\n      if (provider.chainId !== 1172) {\n        if (\n          provider.isMetaMask ||\n          (typeof provider.wc !== \"undefined\" &&\n            provider.wc.peerMeta.name === \"MetaMask\")\n        ) {\n          await provider.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: ethers.utils.hexValue(1172) }],\n          });\n        }\n\n        // change chain when Torus wallet is not on 1172\n        if (provider.torus) {\n          await provider.torus.setProvider({\n            // host: \"goerli\",\n            // chainId: \"5\",\n            // networkName: \"goerli\",\n            host: \"https://testnet-rpc.vegas.one\",\n            chainId: 1172,\n            networkName: \"testnet\",\n            blockExplorer: \"https://testnet-explorer.vegas.one/\",\n          });\n        }\n      }\n      */\n\n      /*\n    const web3 = new Web3(provider);\n    console.log(web3);\n    // torus account\n    const accounts = await web3.eth.getAccounts();\n    const signer = await web3.eth.accounts;\n    console.log(signer);\n    const chainId = await web3.eth.getChainId();\n    console.log(\"chainId\", chainId);\n    setProvider(web3);\n    setSigner(signer);\n    if (chainId !== 1172)\n      addNetwork([\n        {\n          chainId: \"0x494\",\n          chainName: \"VegasONE Chain\",\n          nativeCurrency: {\n            name: \"VOC\",\n            symbol: \"VOC\",\n            decimals: 18,\n          },\n          rpcUrls: [\"https://testnet-rpc.vegas.one\"],\n          // blockExplorerUrls: [\"\"]\n        },\n      ]);\n    */\n      const web3Provider = new ethers.providers.Web3Provider(web3Modal, \"any\");\n      const signer = web3Provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await web3Provider.getNetwork();\n      // console.log(\"currently address : \", address);\n      // console.log(\"currently network : \", network);\n      setAddress(address);\n      setChainId(network.chainId);\n      // setWeb3Modal(provider);\n      setProvider(web3Provider);\n      setSigner(signer);\n    } catch (e) {\n      console.log(\"catch err\", e);\n    }\n  };\n\n  const getBalanceUSDT = async () => {\n    const test = async () => {\n      const contract = new ethers.Contract(USDT, VegasONE[\"abi\"], signer);\n      const decimals = await contract.decimals();\n      const res = await contract.balanceOf(await signer.getAddress());\n      console.log(res);\n      setBalance(ethers.utils.formatUnits(res, decimals));\n    };\n    try {\n      await test();\n    } catch (e) {\n      console.log(e);\n      setTimeout(test, 3000);\n    }\n  };\n\n  const getBalanceVOC = async () => {\n    const test = async () => {\n      const contract = new ethers.Contract(VOC, VegasONE[\"abi\"], signer);\n      const decimals = await contract.decimals();\n      const res = await contract.balanceOf(await signer.getAddress());\n      console.log(res);\n      setBalance(ethers.utils.formatUnits(res, decimals));\n    };\n    try {\n      await test();\n    } catch (e) {\n      console.log(e);\n      setTimeout(test, 3000);\n    }\n  };\n\n  const changeToTestnet = async () => {\n    if (web3Modal.chainId !== 1172) {\n      if (\n        web3Modal.isMetaMask ||\n        (typeof web3Modal.wc !== \"undefined\" &&\n          web3Modal.wc.peerMeta.name === \"MetaMask\")\n      ) {\n        await web3Modal.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: ethers.utils.hexValue(1172) }],\n        });\n      }\n\n      // change chain when Torus wallet is not on 1172\n      if (web3Modal.torus) {\n        await web3Modal.torus.setProvider({\n          host: \"https://testnet-rpc.vegas.one\",\n          chainId: 1172,\n          networkName: \"testnet\",\n          blockExplorer: \"https://testnet-explorer.vegas.one/\",\n        });\n      }\n    }\n\n    const test = async () => {\n      const web3Provider = new ethers.providers.Web3Provider(web3Modal, \"any\");\n      const newSigner = web3Provider.getSigner();\n      const network = await web3Provider.getNetwork();\n      setChainId(network.chainId);\n      setProvider(web3Provider);\n      setSigner(newSigner);\n    };\n\n    setTimeout(test, 5000);\n  };\n\n  const transferUSDT = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n\n    const contract = new ethers.Contract(USDT, VegasONE[\"abi\"], signer);\n    const decimals = await contract.decimals();\n\n    let tx = await contract.transfer(\n      usdtTo,\n      ethers.utils.parseUnits(\"1\", decimals)\n    );\n    await tx.wait();\n    getBalanceUSDT();\n  };\n\n  const changeToGoerli = async () => {\n    if (web3Modal.chainId !== 5) {\n      if (\n        web3Modal.isMetaMask ||\n        (typeof web3Modal.wc !== \"undefined\" &&\n          web3Modal.wc.peerMeta.name === \"MetaMask\")\n      ) {\n        await web3Modal.request({\n          method: \"wallet_switchEthereumChain\",\n          params: [{ chainId: ethers.utils.hexValue(5) }],\n        });\n      }\n\n      // change chain when Torus wallet is not on 1172\n      if (web3Modal.torus) {\n        await web3Modal.torus.setProvider({\n          host: \"goerli\",\n          chainId: \"5\",\n          networkName: \"goerli\",\n        });\n      }\n    }\n\n    const test = async () => {\n      const web3Provider = new ethers.providers.Web3Provider(web3Modal, \"any\");\n      const newSigner = web3Provider.getSigner();\n      const network = await web3Provider.getNetwork();\n      setChainId(network.chainId);\n      setProvider(web3Provider);\n      setSigner(newSigner);\n    };\n\n    setTimeout(test, 5000);\n  };\n\n  const transferVOC = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n\n    const contract = new ethers.Contract(VOC, VegasONE[\"abi\"], signer);\n    const decimals = await contract.decimals();\n\n    let tx = await contract.transfer(\n      vocTo,\n      ethers.utils.parseUnits(\"1\", decimals)\n    );\n    await tx.wait();\n    getBalanceVOC();\n  };\n\n  const logout = async () => {\n    if (!provider) return;\n    if (web3Modal.wc) {\n      web3Modal.wc.killSession();\n    } else if (web3Modal.torus) {\n      await web3Modal.torus.logout();\n    } else if (provider.disconnect) {\n      await provider.disconnect();\n    }\n    // setWeb3Modal(null);\n    setProvider(null);\n    setSigner(null);\n    setAddress(\"\");\n    setChainId();\n    setBalance();\n    console.log(\n      \"logout!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {isEmpty(signer) && <button onClick={login}>login</button>}\n      {!isEmpty(signer) && <button onClick={logout}>logout</button>}\n      <p>address: {address}</p>\n      <p>chainId: {chainId}</p>\n      <p>balance: {balance}</p>\n      <div className=\"transfer\">\n        <div className=\"input-group\">\n          <p>固定轉出：USDT * 1 on Testnet</p>\n          <div>USDT: {USDT}</div>\n          {chainId === undefined ? null : chainId !== 1172 ? (\n            <button onClick={changeToTestnet}>changeToTestnet</button>\n          ) : null}\n          <div className=\"transfer-to\">\n            <p>to address: </p>\n            <input type=\"text\" onChange={(e) => setUsdtTo(e.target.value)} />\n          </div>\n        </div>\n        <button onClick={transferUSDT}>transfer</button>\n      </div>\n      <div className=\"transfer\">\n        <div className=\"input-group\">\n          <p>固定轉出：VOC * 1 on Goerli</p>\n          <div>VOC: {VOC}</div>\n          {chainId === undefined ? null : chainId !== 5 ? (\n            <button onClick={changeToGoerli}>changeToGoerli</button>\n          ) : null}\n          {/* {console.log(isEmpty(chainId))} */}\n          <div className=\"transfer-to\">\n            <p>to address: </p>\n            <input type=\"text\" onChange={(e) => setVocTo(e.target.value)} />\n          </div>\n        </div>\n        <button onClick={transferVOC}>transfer</button>\n      </div>\n      <p>v 0.1.1</p>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}