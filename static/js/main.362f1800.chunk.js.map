{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["USDT","App","useState","web3Modal","setWeb3Modal","provider","setProvider","signer","setSigner","address","setAddress","chainId","setChainId","balance","setBalance","to","setTo","useEffect","isEmpty","getBalance","login","providerOptions","walletconnect","package","WalletConnectProvider","options","rpc","qrcodeModalOptions","mobileLinks","torus","Torus","networkParams","host","initWeb3Modal","Web3Modal","cacheProvider","connect","console","log","wc","isMetaMask","peerMeta","name","request","method","params","ethers","utils","hexValue","networkName","web3Provider","providers","Web3Provider","getSigner","getAddress","getNetwork","network","contract","Contract","VegasONE","decimals","balanceOf","res","formatUnits","transfer","parseUnits","tx","wait","logout","killSession","disconnect","className","onClick","type","onChange","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.362f1800.chunk.js","sourcesContent":["import Torus from \"@toruslabs/torus-embed\";\nimport \"./App.css\";\nimport { ethers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nimport VegasONE from \"./abi/VegasONE.json\";\nimport { isEmpty } from \"lodash\";\nimport WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport Web3Modal from \"web3modal\";\n// import Web3 from \"web3\";\n\nconst USDT = \"0xd691aCE60338a304cb0e5e7F82d77e81f02A248f\";\nconst myAddr = \"0x99e54058245b08bd7b40481F971F0EaC255ffDf7\";\n\n// const addNetwork = async (params) => {\n//   try {\n//     await window.ethereum.request({\n//       method: \"wallet_addEthereumChain\",\n//       params,\n//     });\n//   } catch (e) {\n//     console.log(\"addNetwork err\", e);\n//   }\n// };\n\nfunction App() {\n  const [web3Modal, setWeb3Modal] = useState();\n  const [provider, setProvider] = useState();\n  const [signer, setSigner] = useState();\n  const [address, setAddress] = useState(\"\");\n  const [chainId, setChainId] = useState();\n  const [balance, setBalance] = useState();\n  const [to, setTo] = useState(\"\");\n\n  useEffect(() => {\n    !isEmpty(signer) && getBalance();\n  }, [signer]);\n\n  const login = async () => {\n    const providerOptions = {\n      walletconnect: {\n        package: WalletConnectProvider, // required\n        options: {\n          rpc: { 1172: \"https://testnet-rpc.vegas.one\" }, // required\n          chainId: [1172],\n          // infuraId: \"1505b863360c4bfa846e6e9a170aa9fe\",\n        },\n        qrcodeModalOptions: {\n          mobileLinks: [\"metamask\"],\n        },\n      },\n      torus: {\n        package: Torus,\n        options: {\n          networkParams: {\n            host: \"https://testnet-rpc.vegas.one\",\n            chainId: 1172,\n            // networkName: \"VegasOneChain testnet\",\n            // host: \"goerli\",\n            // chainId: 5,\n            // infuraId: \"1505b863360c4bfa846e6e9a170aa9fe\",\n          },\n          // network: \"goerli\",\n          // host: \"https://testnet-rpc.vegas.one\",\n        },\n      },\n    };\n\n    try {\n      let initWeb3Modal = new Web3Modal({\n        // disableInjectedProvider: false,\n        cacheProvider: false,\n        providerOptions, // required\n      });\n      // console.log(initWeb3Modal);\n\n      const provider = await initWeb3Modal.connect();\n      console.log(provider);\n      // console.log(provider);\n\n      // if (provider.chainId !== 1172)\n      //   await addNetwork([\n      //     {\n      //       chainId: \"0x494\",\n      //       chainName: \"Testnet\",\n      //       nativeCurrency: {\n      //         name: \"VOC\",\n      //         symbol: \"VOC\",\n      //         decimals: 18,\n      //       },\n      //       rpcUrls: [\"https://testnet-rpc.vegas.one\"],\n      //       // blockExplorerUrls: [\"\"]\n      //     },\n      //   ]);\n\n      console.log(typeof provider.wc);\n      // only test wc with metamask or metamask extension\n      if (provider.chainId !== 1172) {\n        if (\n          provider.isMetaMask ||\n          (typeof provider.wc !== \"undefined\" &&\n            provider.wc.peerMeta.name === \"MetaMask\")\n        ) {\n          await provider.request({\n            method: \"wallet_switchEthereumChain\",\n            params: [{ chainId: ethers.utils.hexValue(1172) }],\n          });\n        }\n\n        // change chain when Torus wallet is not on 1172\n        if (provider.torus) {\n          await provider.torus.setProvider({\n            // host: \"goerli\",\n            // chainId: \"5\",\n            // networkName: \"goerli\",\n            host: \"https://testnet-rpc.vegas.one\",\n            chainId: \"1172\",\n            networkName: \"testnet\",\n          });\n        }\n      }\n\n      // console.log(provider);\n      /*\n    const web3 = new Web3(provider);\n    console.log(web3);\n    // torus account\n    const accounts = await web3.eth.getAccounts();\n    const signer = await web3.eth.accounts;\n    console.log(signer);\n    const chainId = await web3.eth.getChainId();\n    console.log(\"chainId\", chainId);\n    setProvider(web3);\n    setSigner(signer);\n    if (chainId !== 1172)\n      addNetwork([\n        {\n          chainId: \"0x494\",\n          chainName: \"VegasONE Chain\",\n          nativeCurrency: {\n            name: \"VOC\",\n            symbol: \"VOC\",\n            decimals: 18,\n          },\n          rpcUrls: [\"https://testnet-rpc.vegas.one\"],\n          // blockExplorerUrls: [\"\"]\n        },\n      ]);\n    */\n      const web3Provider = new ethers.providers.Web3Provider(provider, \"any\");\n      const signer = web3Provider.getSigner();\n      const address = await signer.getAddress();\n      const network = await web3Provider.getNetwork();\n      console.log(\"currently address : \", address);\n      console.log(\"currently network : \", network);\n      // const contract = new ethers.Contract(USDT, VegasONE[\"abi\"], signer);\n      // const decimals = await contract.decimals();\n      // setBalance(\n      //   ethers.utils.formatUnits(\n      //     await contract.balanceOf(await signer.getAddress()),\n      //     decimals\n      //   )\n      // );\n      setAddress(address);\n      setChainId(network.chainId);\n      setWeb3Modal(provider);\n      setProvider(web3Provider);\n      setSigner(signer);\n      // await getBalance();\n      // if (network.chainId !== 1172)\n      //   addNetwork([\n      //     {\n      //       chainId: \"0x494\",\n      //       chainName: \"VegasONE Chain\",\n      //       nativeCurrency: {\n      //         name: \"VOC\",\n      //         symbol: \"VOC\",\n      //         decimals: 18,\n      //       },\n      //       rpcUrls: [\"https://testnet-rpc.vegas.one\"],\n      //       // blockExplorerUrls: [\"\"]\n      //     },\n      //   ]);\n    } catch (e) {\n      console.log(\"catch err\", e);\n    }\n  };\n\n  const getBalance = async () => {\n    console.log(\"getBalance start\");\n    const contract = new ethers.Contract(USDT, VegasONE[\"abi\"], signer);\n    const decimals = await contract.decimals();\n    console.log(\"getBalance address\", address);\n    console.log(\"getBalance decimals\", decimals);\n    const res = await contract.balanceOf(address);\n    setBalance(ethers.utils.formatUnits(res, decimals));\n  };\n\n  // const test = () => {\n  //   let opts = {\n  //     networkParams: {\n  //       // host: \"https://testnet-rpc.vegas.one\",\n  //       // chainId: 1172,\n  //       // networkName: \"VegasOneChain testnet\",\n  //       host: \"goerli\",\n  //       chainId: 5,\n  //       // infuraId: \"1505b863360c4bfa846e6e9a170aa9fe\",\n  //     },\n  //     // network: \"goerli\",\n  //     // host: \"https://testnet-rpc.vegas.one\",\n  //   };\n  //   let network =\n  //     opts.networkParams || opts.network\n  //       ? { host: opts.network, ...opts.networkParams }\n  //       : network;\n  //   console.log(network);\n  // };\n\n  const transfer = async () => {\n    if (!provider) {\n      console.log(\"provider not initialized yet\");\n      return;\n    }\n\n    const contract = new ethers.Contract(USDT, VegasONE[\"abi\"], signer);\n    const decimals = await contract.decimals();\n    console.log(\n      \"balance before: \",\n      ethers.utils.formatUnits(\n        await contract.balanceOf(await signer.getAddress()),\n        decimals\n      )\n    );\n\n    let tx = await contract.transfer(\n      to,\n      ethers.utils.parseUnits(\"1\", decimals)\n    );\n    await tx.wait();\n\n    console.log(\n      \"balance after: \",\n      ethers.utils.formatUnits(\n        await contract.balanceOf(await signer.getAddress()),\n        decimals\n      )\n    );\n  };\n\n  // const logout = async () => {\n  //   if (!provider) return;\n  //   if (signer.wallet) await signer.wallet.clear();\n  //   console.log(provider);\n  //   console.log(signer);\n  //   setProvider(null);\n  //   setSigner(null);\n  // };\n\n  const logout = async () => {\n    if (!provider) return;\n    // await web3Modal.clearCachedProvider();\n    if (web3Modal.wc) {\n      web3Modal.wc.killSession();\n    } else if (web3Modal.torus) {\n      await web3Modal.torus.logout();\n    } else if (provider.disconnect) {\n      await provider.disconnect();\n    }\n    setWeb3Modal(null);\n    setProvider(null);\n    setSigner(null);\n    setAddress(\"\");\n    setChainId();\n    setBalance();\n    console.log(\n      \"logout!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\"\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      {isEmpty(signer) && <button onClick={login}>login</button>}\n      {!isEmpty(signer) && <button onClick={logout}>logout</button>}\n      <button onClick={getBalance}>getBalance</button>\n      <p>address: {address}</p>\n      <p>chainId: {chainId}</p>\n      <p>balance: {balance}</p>\n      <div className=\"transfer\">\n        <div className=\"input-group\">\n          <p>固定轉出：USDT * 1</p>\n          <div className=\"transfer-to\">\n            <p>to address: </p>\n            <input type=\"text\" onChange={(e) => setTo(e.target.value)} />\n          </div>\n        </div>\n        <button onClick={transfer}>transfer</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.js\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n// const root = ReactDOM.createRoot(document.getElementById(\"root\"));\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}